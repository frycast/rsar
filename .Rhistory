class(raster::extent(raster::raster())) == raster::extent(raster::raster())
library(rsar)
filename_cc <- system.file(
"extdata", "MG_CC_sub_norm_testclip.tif", package="rsar")
filename_vh <- system.file(
"extdata", "MG_VH_sub_norm_testclip.tif", package="rsar")
cc_m1 <- load_SAR_matrix(filename_cc)
cc_b1 <- raster::brick(filename_cc)
cc_m2 <- brick_to_matrix(cc_b1)
cc_b2 <- matrix_to_brick(cc_m1)
vh_m1 <- load_SAR_matrix(filename_vh)
vh_b1 <- raster::brick(filename_vh)
filename_cc <- system.file(
"extdata", "MG_CC_sub_norm_testclip.tif", package="rsar")
filename_vh <- system.file(
"extdata", "MG_VH_sub_norm_testclip.tif", package="rsar")
cc_m1 <- load_SAR_matrix(filename_cc)
cc_b1 <- raster::brick(filename_cc)
cc_m2 <- brick_to_matrix(cc_b1)
cc_b2 <- matrix_to_brick(cc_m1)
attr(cc_m2, "brick_dim")
attr(cc_m1, "brick_dim")
library(rsar)
cc_m1 <- load_SAR_matrix(filename_cc)
cc_b1 <- raster::brick(filename_cc)
cc_m2 <- brick_to_matrix(cc_b1)
library(rsar)
cc_m2 <- brick_to_matrix(cc_b1)
cc_m1 <- load_SAR_matrix(filename_cc)
cc_b1 <- raster::brick(filename_cc)
cc_m2 <- brick_to_matrix(cc_b1)
cc_b2 <- matrix_to_brick(cc_m1)
attr(cc_m1, "brick_dim")
attributes(cc_m1)
library(rsar)
?SAR_matrix
filename_cc <- system.file(
"extdata", "MG_CC_sub_norm_testclip.tif", package="rsar")
filename_vh <- system.file(
"extdata", "MG_VH_sub_norm_testclip.tif", package="rsar")
cc_m1 <- load_SAR_matrix(filename_cc)
cc_m1
rm(list = ls())
filename_cc <- system.file(
"extdata", "MG_CC_sub_norm_testclip.tif", package="rsar")
filename_vh <- system.file(
"extdata", "MG_VH_sub_norm_testclip.tif", package="rsar")
cc_m1 <- load_SAR_matrix(filename_cc)
cc_b1 <- raster::brick(filename_cc)
cc_m2 <- brick_to_matrix(cc_b1)
cc_b2 <- matrix_to_brick(cc_m1)
attributes(cc_m1)
cc_m1 <- load_SAR_matrix(filename_cc)
cc_b1 <- raster::brick(filename_cc)
cc_m2 <- brick_to_matrix(cc_b1)
cc_b2 <- matrix_to_brick(cc_m1)
attributes(cc_m1)
attr(cc_m1, "brick_dim")
vh_m1 <- load_SAR_matrix(filename_vh)
vh_b1 <- raster::brick(filename_vh)
vh_m2 <- brick_to_matrix(vh_b1)
vh_b2 <- matrix_to_brick(vh_m1)
dim(cc_m1)
matrix(0, 3, 3)
matrix(0, 4, 3)
library(rsar)
as.integer(3.6)
assertthat::assert_that( is.integer(1) )
assertthat::assert_that( is.integer(1L) )
length(1)
length(1L)
library(rsar)
library(rsar)
library(rsar)
library(rsar)
rcmdcheck::rcmdcheck()
rcmdcheck::rcmdcheck()
library(rsar)
usethis::use_coverage(pkg = ".", type = c("codecov"))
usethis::use_coverage(type = c("codecov"))
rcmdcheck::rcmdcheck()
ls <- list(a = c(1,2,3), b = c("a","b","c"))
ls
ls$a
ls$b
attr(ls, "list_name") <- "my_list"
ls
ls@list_name
filename <- system.file(
"extdata", "MG_CC_sub_norm_testclip.tif", package="rsar")
b <- raster::brick(filename)
b
crs(b)
extent(b)
names(b)
resolution(b)
raster::crs(b)
raster::extent(b)
raster::resolution(b)
raster::res(b)
raster::crs(b)
raster::extent(b)
names(b)
raster::res(b)
class(raster)
class(b)
is(b)
class(b)
is(b)
class(b)
class(b)
methods(b)
attributes(b)
?attributes
attributes(b)
cat('\014')
cat('\014')
`[` <- function(x,y) {
print("hello")
}
v <- c(1,2,3,4)
v[1]
v[2]
`[`(v,1)
rm(list=ls())
v <- c(1,2,3,4)
`[`(v,1)
`[`(v,2)
`[` <- function(x,y) {
print("hello")
}
`[`(v,2)
`[`(v,1)
source('D:/GDrive/YSync/PhD/6_Collaborations/rsar/R/class.R', echo=TRUE)
v[3]
v[3]
rm(list=ls())
filename <- system.file(
"extdata", "MG_CC_sub_norm_testclip.tif", package="rsar")
b <- raster::brick(filename)
raster::res(b)
b
raster::res(b) <- c(1,1)
b
filename <- system.file(
"extdata", "MG_CC_sub_norm_testclip.tif", package="rsar")
b <- raster::brick(filename)
raster::res(b)
b
?raster::res
attributes(b)
attributes(b)$res
attributes(b)$resolution
brick_to_matrix(b)
rsar::brick_to_matrix(b)
rsar::matrix_to_brick(rsar::brick_to_matrix(b))
res(b)
raster::res(b)
raster::res(rsar::matrix_to_brick(rsar::brick_to_matrix(b)))
library(rsar)
filename <- system.file(
"extdata", "MG_CC_sub_norm_testclip.tif", package="rsar")
b <- raster::brick(filename)
raster::res(rsar::matrix_to_brick(rsar::brick_to_matrix(b)))
library(rsar)
filename <- system.file(
"extdata", "MG_CC_sub_norm_testclip.tif", package="rsar")
b <- raster::brick(filename)
raster::res(rsar::matrix_to_brick(rsar::brick_to_matrix(b)))
library(rsar)
filename <- system.file(
"extdata", "MG_CC_sub_norm_testclip.tif", package="rsar")
b <- raster::brick(filename)
raster::res(rsar::matrix_to_brick(rsar::brick_to_matrix(b)))
rsar::matrix_to_brick(rsar::brick_to_matrix(b))
extent(b)
extent(rsar::matrix_to_brick(rsar::brick_to_matrix(b)))
raster::extent(rsar::matrix_to_brick(rsar::brick_to_matrix(b)))
rsar::matrix_to_brick(rsar::brick_to_matrix(b))
raster::extent(rsar::matrix_to_brick(rsar::brick_to_matrix(b)))
rsar::matrix_to_brick(rsar::brick_to_matrix(b))@extent
library(rsar)
filename <- system.file(
"extdata", "MG_CC_sub_norm_testclip.tif", package="rsar")
b <- raster::brick(filename)
rsar::matrix_to_brick(rsar::brick_to_matrix(b))@extent
m <- rsar::brick_to_matrix(b)
m
b2 <- rsar::matrix_to_brick(m)
b2
extent(b2) <- extent(b)
extent(b2)
attr(m, "extent")
extent(b2) <- attr(m, "extent")
extent(b2)
filename <- system.file(
"extdata", "MG_CC_sub_norm_testclip.tif", package="rsar")
b <- raster::brick(filename)
m <- rsar::brick_to_matrix(b)
b2 <- rsar::matrix_to_brick(m)
attr(m, "extent")
extent(b2) <- attr(m, "extent")
extent(b2)
library(rsar)
filename <- system.file(
"extdata", "MG_CC_sub_norm_testclip.tif", package="rsar")
b <- raster::brick(filename)
m <- rsar::brick_to_matrix(b)
b2 <- rsar::matrix_to_brick(m)
attr(m, "extent")
extent(b2)
extent(b2) <- attr(m, "extent")
extent(b2)
?raster::brick
library(rsar)
filename <- system.file(
"extdata", "MG_CC_sub_norm_testclip.tif", package="rsar")
b <- raster::brick(filename)
m <- rsar::brick_to_matrix(b)
b2 <- rsar::matrix_to_brick(m)
filename <- system.file(
"extdata", "MG_CC_sub_norm_testclip.tif", package="rsar")
b <- raster::brick(filename)
m <- rsar::brick_to_matrix(b)
b2 <- rsar::matrix_to_brick(m)
filename <- system.file(
"extdata", "MG_CC_sub_norm_testclip.tif", package="rsar")
library(rsar)
b <- raster::brick(filename)
m <- rsar::brick_to_matrix(b)
b2 <- rsar::matrix_to_brick(m)
attr(m, "extent")
extent(b2)
extent(b)
attr(m, "extent")
?extent
r <- raster()
extent(r)
extent(c(0, 20, 0, 20))
#is equivalent to
extent(0, 20, 0, 20)
extent(matrix(c(0, 0, 20, 20), nrow=2))
x <- list(x=c(0,1,2), y=c(-3,5))
extent(x)
extent(r)
extent(r) <- c(0,0,1,1)
extent(r)
extent(r) <- extent(c(0,0,1,1))
extent(r)
r@extent <- extent(c(0,0,1,1))
extent(r)
r <- raster()
extent(r)
extent(c(0, 20, 0, 20))
#is equivalent to
extent(0, 20, 0, 20)
extent(matrix(c(0, 0, 20, 20), nrow=2))
x <- list(x=c(0,1,2), y=c(-3,5))
extent(x)
extent(r) <- extent(c(0,0,1,1))
extent(r)
extent(r) <- extent(c(0,1,0,1))
extent(r)
r
extent(r) <- c(0,1,0,1)
extent(r)
r
extent(r) <- extent(c(0,1,0,1))
extent(r)
r
filename <- system.file(
"extdata", "MG_CC_sub_norm_testclip.tif", package="rsar")
b <- raster::brick(filename)
extent(b)
m <- rsar::brick_to_matrix(b)
assertthat::assert_that(is_SAR_matrix(m))
dim <- attr(m, "brick_dim")
dim
b <- raster::brick(reticulate::array_reshape(m, dim = dim),
crs = attr(m, "crs"))
b
attr(m, "extent")
extent(b) <- attr(m, "extent")
b
names(b) <- attr(m, "names")
res(b) <- attr(m, "brick_res")
b
library(rsar)
filename <- system.file(
"extdata", "MG_CC_sub_norm_testclip.tif", package="rsar")
b <- raster::brick(filename)
m <- rsar::brick_to_matrix(b)
b2 <- rsar::matrix_to_brick(m)
b2
attributes(b2)
attributes(b)
attributes(b)
attributes(b2)
library(rsar)
rcmdcheck::rcmdcheck()
rcmdcheck::rcmdcheck()
raster::names
rcmdcheck::rcmdcheck()
library(rsar)
library(rsar)
library(rsar)
library(rsar)
#' @return
#' A \code{SAR_matrix} object; a specialisation
#' of class matrix that includes geospatial
#' and brick dimension attributes.
#'
#' @export
#'
#' @examples
#' SAR_matrix()
#'
SAR_matrix <- function(
m = matrix(0, 4, 3), extent = raster::extent(raster::raster()),
crs = "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0",
brick_nrow = 2, brick_ncol = nrow(m) / brick_nrow,
brick_names = paste0( "layer.", 1:ncol(m) ), attr_src) {
assertthat::assert_that( brick_nrow * brick_ncol == nrow(m) )
assertthat::assert_that( length(brick_nrow) == 1 )
assertthat::assert_that( length(brick_ncol) == 1 )
assertthat::assert_that( length(brick_names) == ncol(m) )
if ( missing(attr_src) ) {
m <- structure(
m, class = c("SAR_matrix", class(m)),
extent = extent,
crs = crs,
brick_dim = c( brick_nrow, brick_ncol, ncol(m) ),
brick_names = brick_names)
} else {
m <- SAR_matrix(
m,
extent = attr(attr_src, "extent"),
crs = attr(attr_src, "crs"),
brick_nrow = attr(attr_src, "brick_dim")[1],
brick_ncol = attr(attr_src, "brick_dim")[2])
}
return(m)
}
rm(SAR_matrix)
library(rsar)
library(rsar)
library(rsar)
rcmdcheck::rcmdcheck()
testthat::test_that("tif data loads",
testthat::expect_equal(a, b)
testthat::expect_error(matrix_to_brick("something"))
)
testthat::expect_error(matrix_to_brick("something"))
testthat::expect_error(matrix_to_brick(m))
m
testthat::expect_error(SAR_matrix())
?testthat::expect_type
filename <- system.file(
"extdata", "MG_VH_sub_norm_testclip.tif", package="rsar")
x <- load_SAR_matrix(filename)
library(rsar)
x <- load_SAR_matrix(filename)
attributes(x)
attributes(x)$crs
testthat::expect_equal(attributes(x)$crs, "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
testthat::expect_equal(attributes(x)$crs[1], "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
attributes(x)$crs
str(attributes(x)$crs)
attributes(x)$crs
str(attributes(x)$crs)
attributes(x)$crs@projargs
testthat::expect_equal(attributes(x)$crs@projargs, "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
attributes(x)
attributes(x)$extent
str(attributes(x)$extent)
round(0.127653278653876563, digits = 2)
str(attributes(x)$extent)
library(rsar)
filepath <- system.file("extdata", "MG_CC_sub_norm_testclip.tif", package="rsar")
m <- load_SAR_matrix(filepath)
m <- load_SAR_matrix(filepath)
order <- choose_order(m)
order
m <- SAR_matrix()
order <- choose_order(m)
m
library(rsar)
rcmdcheck::rcmdcheck()
?ar
library(rsar)
rcmdcheck::rcmdcheck()
library(rsar)
rcmdcheck::rcmdcheck()
library(rsar)
rcmdcheck::rcmdcheck()
?ar
library(rsar)
rcmdcheck::rcmdcheck()
"extdata", "MG_CC_sub_norm_testclip.tif", package="rsar")
filename <- system.file(
"extdata", "MG_CC_sub_norm_testclip.tif", package="rsar")
m <- load_SAR_matrix(filename)
library(rsar)
m <- load_SAR_matrix(filename)
str(m)
str(matrix_to_brick(m))
names(matrix_to_brick(m))
attr(m, "brick_names")
attr(m, "extent")
library(rsar)
library(rsar)
rcmdcheck::rcmdcheck()
library(rsar)
library(rsar)
#' pixels, i.e., it is assumed that an \code{NA} pixel is
#' \code{NA} across all layers.
#'
#' @return
#' An object of class \code{\link[rsar]{SAR_matrix}}; a specialisation
#' of class matrix.
#'
#' @export
#'
#' @examples
filename <- system.file(
"extdata", "MG_CC_sub_norm_testclip.tif", package="rsar")
b <- raster::brick(filename)
m <- brick_to_matrix(b)
library(rsar)
library(rsar)
a <- c(1,2,3,NA,5,6,NA,NA,9)
v <- vector(mode = "numeric", length = length(a))
v <- vector( mode = "numeric", length = length(a) )
v
v <- vector(NA, mode = "numeric", length = length(a) )
?vector
n <- c(4, 7, 8)
v[n,] <- NA
n <- c(4, 7, 8)
v <- vector( mode = "numeric", length = length(a) )
v[n,] <- NA
v[n] <- NA
v
v[!is.na(v), ] <- b
v[!is.na(v)] <- b
!is.na(v)
v[!is.na(v)]
v[!is.na(v)] <- 1
v
b
a <- c(1, 2, 3, NA, 5, 6, NA, NA, 9)
b <- c(1, 2, 3, 5, 6, 9)
n <- c(4, 7, 8)
v <- vector( mode = "numeric", length = length(a) )
v[n] <- NA
v
v[!is.na(v)] <- b
v
m <- matrix( 0, nrow = 9, ncol = 2 )
m
m[n,] <- NA
m
b <- matrix(c(1,1,2,2,3,3,5,5,6,6,9,9), nrow = 9)
b <- matrix(c(1,1,2,2,3,3,5,5,6,6,9,9), nrow = 6 )
b
b <- matrix(c(1,1,2,2,3,3,5,5,6,6,9,9), byrow = T, nrow = 6 )
b
m
m[n,] <- NA
m[!is.na(m[,1])] <- b
m
l <- length( na_indices )
matrix(0), nrow = 2, ncol = 2)
matrix(0, nrow = 2, ncol = 2)
library(rsar)
library(rsar)
?raster::brick
library(rsar)
source('D:/GDrive/YSync/PhD/6_Collaborations/rsar/R/load_and_reshape.R')
library(rsar)
rm(list=ls())
library(rsar)
library(rsar)
library(rsar)
library(rsar)
m <- matrix(0, nrow = 9, ncol = 2)
m
na_indices <- c(5,8,9)
m <- matrix(0, nrow = 6, ncol = 2)
len <- nrow( m ) + na_len
na_indices <- c(5,8,9)
na_len <- length( na_indices )
m <- matrix(0, nrow = 6, ncol = 2)
len <- nrow( m ) + na_len
m_new <- matrix( NA, nrow = len, ncol = ncol(m) )
m_new
m_new[ -na_indices ] <- m
m_new[ -na_indices ]
na_indices
m
m_new
m_new[ -na_indices, ] <- m
m_new
na_indices <- c(5,8,9)
na_len <- length( na_indices )
m <- matrix(0, nrow = 6, ncol = 2)
len <- nrow( m ) + na_len
m_new <- matrix( NA, nrow = len, ncol = ncol(m) )
m_new[ -na_indices, ] <- m
m_new
library(rsar)
library(rsar)
