setwd("D:/GDrive/YSync/PhD/6_Collaborations/rsar")
devtools::create()
devtools::create("rsar")
usethis::create_package()
?usethis::create_package
usethis::create_package("../rsar")
library('rsar')
library(rsar)
install.packages('rsar')
library(rsar)
library(rsar)
library(rsar)
library(raster)
library(rsar)
library(rsar)
filepath <- system.file("extdata", "MG_CC_sub_norm_testclip.tif", package="rsar")
sample <- raster::brick(filepath)
filepath <- system.file("extdata", "MG_CC_sub_norm_testclip.tif", package="rsar")
sample <- raster::brick(filepath)
samepl
sameple
sample
plot(sample)
c(1,2,1)
c('test',2,1)
tester <- c('test',2,1)
class(tester)
tester <- c(1,2,1)
tester <- c(1,2,1)
```{r}
class(tester)
class(tester, 'integer')
class('integer', tester)
typeof(tester)
??test_that
?test_that
filename_cc <- system.file(
"extdata", "MG_CC_sub_norm_testclip.tif", package="rsar")
filename_vh <- system.file(
"extdata", "MG_VH_sub_norm_testclip.tif", package="rsar")
filename_vh
filename <- system.file(
"extdata", "MG_CC_sub_norm_testclip.tif", package="rsar")
filename
is.string(filename)
is.character(filename)
testthat::expect_equal(is.character(filename),TRUE)
testthat::that_test('Tif data loads', {
testthat::expect_equal(is.character(filename),TRUE)
)
})
testthat::that_test('Tif data loads', {
testthat::expect_equal(is.character(filename),TRUE)
})
testthat::that_test('Tif data loads', {
testthat::expect_equal(is.character(filename),TRUE)
})
testthat::test_that('Tif data loads', {
testthat::expect_equal(is.character(filename),TRUE)
})
type(filename)
istype(filename)
typeof(filename)
testthat::expect_type(filename, 'character')
rm(filename)
filename
filename
is.null(filename)
!is.null(filename)
testthat::expect_condition(filename, !is.null(filename)
filename <- system.file(
"extdata", "MG_CC_sub_norm_testclip.tif", package="rsar")
filename <- system.file(
"extdata", "MG_CC_sub_norm_testclip.tif", package="rsar")
b <- raster::brick(filename)
m <- brick_to_matrix(b)
#' of class matrix.
#'
#' @export
#'
#' @examples
#' filename <- system.file(
#'   "extdata", "MG_CC_sub_norm_testclip.tif", package="rsar")
#' b <- raster::brick(filename)
#' m <- brick_to_matrix(b)
#'
brick_to_matrix <- function(b) {
b_dim <- dim(b)
d <- c(b_dim[1L]*b_dim[2L], b_dim[3L])
m <- reticulate::array_reshape(raster::as.array(b), dim = d)
m <- SAR_matrix(m, extent = raster::extent(b),
crs = raster::crs(b),
brick_nrow = b_dim[1L],
brick_ncol = b_dim[2L],
brick_names = names(b))
return(m)
}
filename <- system.file(
"extdata", "MG_CC_sub_norm_testclip.tif", package="rsar")
b <- raster::brick(filename)
m <- brick_to_matrix(b)
filename
typeof(filename)
head(m)
b <- raster::brick(filename)
m <- brick_to_matrix(b)
#' @return
#' A \code{SAR_matrix} object; a specialisation
#' of class matrix that includes geospatial
#' and brick dimension attributes.
#'
#' @export
#'
#' @examples
#' SAR_matrix()
#'
SAR_matrix <- function(
m = matrix(0, 4, 3), extent = raster::extent(raster::raster()),
crs = "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0",
brick_nrow = 2, brick_ncol = nrow(m) / brick_nrow,
brick_names = paste0( "layer.", 1:ncol(m) ), attr_src) {
assertthat::assert_that( brick_nrow * brick_ncol == nrow(m) )
assertthat::assert_that( length(brick_nrow) == 1 )
assertthat::assert_that( length(brick_ncol) == 1 )
assertthat::assert_that( length(brick_names) == ncol(m) )
if ( missing(attr_src) ) {
m <- structure(
m, class = c("SAR_matrix", class(m)),
extent = extent,
crs = crs,
brick_dim = c( brick_nrow, brick_ncol, ncol(m) ),
brick_names = brick_names)
} else {
m <- SAR_matrix(
m,
extent = attr(attr_src, "extent"),
crs = attr(attr_src, "crs"),
brick_nrow = attr(attr_src, "brick_dim")[1],
brick_ncol = attr(attr_src, "brick_dim")[2])
}
return(m)
}
source('~/Github/rsar/R/load_and_reshape.R')
source('~/Github/rsar/R/load_and_reshape.R')
source('~/Github/rsar/R/load_and_reshape.R')
rm(list=ls())
graphics.off()
gc()
cat('\014')
source('~/Github/rsar/R/load_and_reshape.R')
library(rsar)
filename_cc <- system.file(
"extdata", "MG_CC_sub_norm_testclip.tif", package="rsar")
filename_vh <- system.file(
"extdata", "MG_VH_sub_norm_testclip.tif", package="rsar")
?isclass
?isClass
filename <- system.file(
"extdata", "MG_VH_sub_norm_testclip.tif", package="rsar")
rm(filename_vh)
rm(filename_cc)
filename
dim(filename)
x <- load_SAR_matrix(filename)
x
View(x)
class(x)
dim(x)
type(x)
typeof(x)
attributes(x)
x$brick_dim
attributes(x$brick_dim)
attributes(x)$brick_dim
view(x)
View(x)
View(attributes(x))
attributes(x)$Extent
attributes(x)$extent
class(attributes(x)$extent)
u <- .(attributes(x)$extent)
u <- list(attributes(x)$extent)
u
u[1]
u[[1]]
attributes(x)$extent
str(x)
str(attributes(x)$extent)
str(attributes(x)$extent)@ymin
str(attributes(x)$extent@ymin)
attributes(x)$extent@ymin
attributes(x)$extent
c(attributes(x)$extent)
attributes(x)
c(attributes(x)$extent)@ymin
c(attributes(x)$extent@ymin)
attributes(x)$extent@ymin
attributes(x)
attributes(x)$brick_names
y <- attributes(x)$brick_names
typeof(y)
attributes(x)$brick_names
attributes(x)
attributes(x)$brick_dim
vh_m1 <- load_SAR_matrix(filename)
vh_b1 <- raster::brick(filename)
vh_m2 <- brick_to_matrix(vh_b1)
vh_b2 <- matrix_to_brick(vh_m1)
vh_m1
vh_m1
vh_b1
attr(,"brick_dim")
attr(vh_m1,"brick_dim")
dim(vh_m1)
dim(vh_b2)
dim(vh_b1)
vh_b1
vh_b1@crs
vh_b1@file
vh_b1@file@name
vh_b1@title
vh_b1@data
vh_b1@data@names
typeof(vh_b1@data@names)
vh_b1@data@names[1]
vh_m1
vh_b1
names(vh_m2)
names(vh_m1)
names(vh_b1)
names(vh_b2)
sum(names(vh_b2))
count(names(vh_b2))
vh_b2
vh_b2@crs
vh_b1@crs == vh_b2@crs
str(vh_b2@crs)
as.list(vh_b2@crs)
summary(vh_b1)
summary(vh_b2)
summary(vh_b2)$Min
summary(vh_b2)@Min
y <- summary(vh_b2)
y[1]
y[2]
summary(vh_b2)[1]
summary(vh_b1)[1]
summary(vh_m1)[1]
summary(vh_m2)[1]
dim(vh_m2)[1]
filename <- system.file(
"extdata", "MG_VH_sub_norm_testclip.tif", package="rsar")
testthat::test_that('Tif data loads correctly', {
x <- load_SAR_matrix(filename)
testthat::expect_equal(class(x), c('SAR_matrix', 'matrix'))
testthat::expect_equal(typeof(x), 'double')
testthat::expect_equal(dim(x), c('2150', '30'))
testthat::expect_equal(attributes(x)$brick_dim, c(43, 50, 30))
})
vh_m1 <- load_SAR_matrix(filename)
vh_b1 <- raster::brick(filename)
vh_m2 <- brick_to_matrix(vh_b1)
vh_b2 <- matrix_to_brick(vh_m1)
m1 <- SAR_matrix()
vh_b1@crs
print(vh_b1@crs)
class(vh_b1@crs)
str(vh_b1@crs)
attributes(x)$crs@projargs
attributes(x)
attributes(x)$extent
attributes(x)$extent@ymin
attributes(x)$extent@ymax
round(attributes(x)$extent@ymax, 3)
round(attributes(x)$extent@xmax, 3)
testthat::expect_equal(round(attributes(x)$extent@ymax, 3), -37.259)
#' An integer.
#'
#' @export
#'
#' @examples
#' filepath <- system.file("extdata", "MG_CC_sub_norm_testclip.tif", package="rsar")
#' m <- load_SAR_matrix(filepath)
#' order <- choose_order(m)
#'
#'
choose_order <- function(m, sample_size = 1e3L) {
s <- sample(1:nrow(m), sample_size)
ms <- m[s,]
max_or <- 0
for (i in 1:nrow(ms)) {
or <- ar(ms[i,])$order
if ( or > max_or ) {max_or <- or}
}
return(as.integer(max_or))
}
#' A matrix of AR coefficients where each row corresponds to
#' one row of \code{m}.
#'
#' @export
#'
#' @examples
#' filepath <- system.file("extdata", "MG_CC_sub_norm_testclip.tif", package="rsar")
#' m <- load_SAR_matrix(filepath)
#' ar_m <- fit_AR_to_SAR(m)
#'
fit_AR_to_SAR  <- function(m, order = choose_order(m)) {
ar_m <- t(apply(m, MARGIN = 1, function(x){ar(x, order = order, aic = F)$ar}))
colnames(ar_m) <- paste0("p", 1:order)
return(ar_m)
}
library(rsar)
?choose_order
ts1 <-  choose_order(m1)
plot(m1)
head(m1)
m1
filename <- system.file(
"extdata", "MG_VH_sub_norm_testclip.tif", package="rsar")
vh_m1 <- load_SAR_matrix(filename)
vh_b1 <- raster::brick(filename)
vh_m2 <- brick_to_matrix(vh_b1)
vh_b2 <- matrix_to_brick(vh_m1)
m1 <- SAR_matrix()
ts1 <-  choose_order(m1)
m1
ncells(m1)
ncell(m1)
ts1 <-  choose_order(vh_m2)
ts1
str(ts1)
head(ts1)
vh_m2
ts1 <-  choose_order(vh_m2)
ts1
ts1 <-  choose_order(vh_m2)
ts1
ts1 <-  choose_order(vh_m2)
ts1
str(ts1)
View(ts1)
ts1 >= 1
ts2 <-  choose_order(vh_m1)
ts2
ts2 <-  choose_order(vh_m1)
ts2
ts2 <-  choose_order(vh_m1)
fit1 <-  fit_AR_to_SAR(vh_m2)
fit1
fit2 <-  fit_AR_to_SAR(vh_m1)
fit2
View(fit2)
dim(fit2)
dim(fit1)
dim(vh_m2)
dim(vh_m2)[1]
dim(fit1)[1]
